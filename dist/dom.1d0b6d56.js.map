{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","before","node1","node2","parentNode","insertBefore","after","nextSibling","append","parent","node","appendChild","wrap","remove","removeChild","empty","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","innerContent","textContent","html","style","Object","object","key","find","selector","scope","querySelectorAll","each","nodeList","fn","i","call"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n  // 创建\r\n  create(string) {\r\n    // template标签可以在里面放任何元素\r\n    let container = document.createElement(\"template\");\r\n    // 去掉字符串前后的空格 字符串是直接写好的如<div><p><span></span></p></div>,不然就要再创建然后添加\r\n    // 将字符串直接放进template标签会直接变成元素\r\n    container.innerHTML = string.trim();\r\n    // return container.content.children[0];\r\n    return container.content.firstChild;\r\n  },\r\n  // parentDiv.insertBefore(sp1, sp2) 将sp1插入到sp2之前\r\n  before(node1, node2) {\r\n    node1.parentNode.insertBefore(node2, node1);\r\n  },\r\n  // 没有 insertAfter() 使用 insertBefore 和 Node.nextSibling 来模拟它\r\n  after(node1, node2) {\r\n    node1.parentNode.insertBefore(node2, node1.nextSibling);\r\n  },\r\n  append(parent, node) {\r\n    parent.appendChild(node);\r\n  },\r\n  // 添加父元素\r\n  wrap(parent, node) {\r\n    dom.before(node, parent);\r\n    dom.append(parent, node);\r\n  },\r\n  remove(node) {\r\n    node.parentNode.removeChild(node);\r\n    return node;\r\n  },\r\n  // 如果使用childNodes,删掉childNodes里元素以后，length会变化,所以不能使用for i遍历删除\r\n  empty(node) {\r\n    let firstChild = node.firstChild;\r\n    let array = [];\r\n    while (firstChild) {\r\n      array.push(dom.remove(firstChild));\r\n      firstChild = node.firstChild;\r\n    }\r\n    return array;\r\n  },\r\n  // 重载（设置不同的参数）\r\n  attr(node, name, value) {\r\n    if (arguments.length === 3) {\r\n      node.setAttribute(name, value);\r\n      // attr(node,name) 获取属性值\r\n    } else if (arguments.length === 2) {\r\n      return node.getAttribute(name);\r\n    }\r\n  },\r\n  // 适配不同的浏览器\r\n  text(node, string) {\r\n    if (arguments.length === 2) {\r\n      if (innerText in node) {\r\n        node.innerText === string; // 很旧的ie只支持\r\n      } else {\r\n        node.innerContent === string; // Chrome firefox\r\n      }\r\n    } else if (arguments.length === 1) {\r\n      if (\"innerText\" in node) {\r\n        return node.innerText;\r\n      } else {\r\n        return node.textContent;\r\n      }\r\n    }\r\n  },\r\n  html(node, string) {\r\n    if (arguments.length === 2) {\r\n      node.innerHTML = string;\r\n    } else if (arguments.length === 1) {\r\n      return node.innerHTML;\r\n    }\r\n  },\r\n  style(node, name, value) {\r\n    if (arguments.length === 3) {\r\n      node.style[name] = value;\r\n    } else if (arguments.length === 2) {\r\n      // dom.style(div,'color')\r\n      if (typeof name === string) {\r\n        return node.style[name];\r\n        // dom.style(div,{color:red})\r\n      } else if (name instanceof Object) {\r\n        const object = name;\r\n        for (let key in object) {\r\n          node.style[key] = object[key];\r\n        }\r\n      }\r\n    }\r\n  },\r\n  find(selector, scope) {\r\n    return (scope || document).querySelectorAll(selector);\r\n  },\r\n  each(nodeList, fn) {\r\n    for (let i = 0; i < nodeList.length; i++) {\r\n      fn.call(null, nodeList[i]);\r\n    }\r\n  },\r\n};\r\n"]}